# Python Logging Snippets
# Author:       Kyle L. Davis
# Version:      0.1.8
# Last Change:  September 19, 2021

#####################
### Basic Logging ###
#####################

snippet logger "Most basic, recommended, logger."
import logging
logger = logging.getLogger(${1:__name__})$0
endsnippet

snippet logger_bacic_config "Logger using basicConfig."
import logging
logging.basicConfig(filename=Path(__file__).parent / Path(__name__).with_suffix('.log'), encoding='utf-8', level=logging.DEBUG)
logger = logging.getLogger(__name__)
endsnippet

################
### Handlers ###
################

snippet log_handler_stream "Stream Handler"
stream_handler = logging.StreamHandler()
stream_handler.setLevel(logging.DEBUG)
#stream_handler.setFormatter(formatter)

logger.addHandler(stream_handler)
endsnippet

snippet log_handler_file "File Handler"
file_handler = logging.FileHandler(Path(__file__).with_suffix('.log'))
file_handler.setLevel(logging.DEBUG)
#file_handler.setFormatter(formatter)

logger.addHandler(file_handler)
endsnippet

################
### Advanced ###
################

snippet log_getLogger "Logger by name." bm
""" Logging """
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

date_format = '%Y-%m-%dT%H:%M:%S%z'
formatter = logging.Formatter(
	fmt='{asctime} - {name} - {levelname:<8} - {message}',
	style='{',
	datefmt=date_format,
	validate=True,
)

file_handler = logging.FileHandler(Path(__file__).with_suffix('.log'))
file_handler.setLevel(logging.DEBUG)
file_handler.setFormatter(formatter)

stream_handler = logging.StreamHandler()
stream_handler.setFormatter(formatter)

logger.addHandler(file_handler)
logger.addHandler(stream_handler)
endsnippet

snippet log_getLogger-utc "Logger by name, with UTC." bm
""" Logging """
# Time from local to gm
logging.Formatter.converter = time.gmtime
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

date_format = '%Y-%m-%dT%H:%M:%S+0000'
formatter = logging.Formatter(
	fmt='{asctime} - {name} - {levelname:<8} - {message}',
	style='{',
	datefmt=date_format,
	validate=True,
)

file_handler = logging.FileHandler(Path(__file__).with_suffix('.log'))
file_handler.setLevel(logging.DEBUG)
file_handler.setFormatter(formatter)

stream_handler = logging.StreamHandler()
stream_handler.setFormatter(formatter)

logger.addHandler(file_handler)
logger.addHandler(stream_handler)
endsnippet

snippet log_dictConfig "Logger with dict as a config. (Best Config)" bm
import logging.config


LOGGING_CONFIG = dict(

	version=1,
	disable_existing_loggers=False,

	formatters={
		'default': {
			'date_format': '%Y-%m-%dT%H:%M:%S+0000',
			'format': '{asctime} - {name} - {levelname:<8} - {message}',
			'style': '{',
			'validate': True,
		},
	},

	handlers={
		'stream_handler': {
			'class': 'logging.StreamHandler',
			'level': logging.DEBUG,
			'formatter': 'default',
		},
	},

	root=dict(
		level=logging.DEBUG,
		handlers=[
			'stream_handler',
		],
	),
	loggers={},
)
logging.config.dictConfig(LOGGING_CONFIG)

# This will inherit from root
logger = logging.getLogger(__name__)
endsnippet

snippet log_fileConfig "Logger with file as a config. (Okay Config)" bm
import loggin.config


config_file = 'logging.conf'
logging.config.fileConfig(
	config_file,
	defaults=dict(
		log_filename=Path(__file__).stem + '.log',
	),
)

logger = logging.getLogger('simpleLogger')
logger.setLevel(logging.WARNING)
endsnippet
