# UltiSnips Snippet Snippets
# Author:       AceofSpades5757
# Version:      1.0.1
# Last Change:  September 19, 2021
#
# Options (`:help UltiSnips-snippet-options`)
# -------
# b - Beginning of Line
# w - Word Boundary
# i - Inline/In-Word
#
# s - Remove Whitespace
# m - Trim All Trailing Whitespace
# t - Do not expand tabs
# A - Auto Trigger
# r - Regex
#
# e - Context
#


###############
### Globals ###
###############

# Today's Date: Month DD, YYYY
global !p
from datetime import date
today = date.today().strftime('%B %d, %Y')
clean_today = ' '.join([i.lstrip('0') for i in today.split()])
today = clean_today
endglobal

# Expand Snippet
# Credit: https://github.com/SirVer/ultisnips/blob/master/doc/examples/snippets-aliasing/README.md
global !p
from helpers import expand
endglobal

# Authorship Information
global !p
from authorship import author
endglobal

#############
### Basic ###
#############

snippet global "Global, Python, snippet block."
global !p
${1:${VISUAL:global block}}
endglobal
endsnippet

snippet reserved "Allows reserved work, like `endsnippet` inside a snippet"
`!p snip.rv = '\`!p snip.rv = "'`${1:${VISUAL:reserved_word}}"\`$0
endsnippet

snippet priority "Set priority for all following snippets." b
priority ${1:0}
endsnippet

snippet priority_wrap "Set priority for following snippet(s), then set back to default." b
priority ${1:100}
${2:${VISUAL:Snippet(s)}}
priority ${1:0}
endsnippet

priority 1  # Do not use placeholder snippet that exists
snippet escape_placeholder "Escape placeholders." i
`!p snip.rv = '$\\'`${1:1}
endsnippet
priority 0

#####################
### Interpolation ###
#####################

snippet interpolation_python "Basic Python Interpolation"
`!p snip.rv = '\`!p snip.rv = '`${1:string}\`$0
endsnippet

snippet interpolation_python_multiline "Basic, Multiline Python Interpolation"
`!p snip.rv = "\`!p"`
${1:Python Code}
`!p snip.rv = "\`"`
endsnippet

snippet interpolation_vim "Basic Vim Interpolation"
`!p snip.rv = '\`!v '`${1:string_expression}\`$0
endsnippet

###############
### Actions ###
###############
# Special snip attributes are noted for reference.

snippet post_expand "Pre Expand. Following snippet will run Python code bfore snippet is expanded from its name/trigger." b
pre_jump "${1:Python code that has access to global snip}"
endsnippet

# snip.snippet_start
# snip.snippet_end
snippet post_expand "Post Expand. Following snippet will run Python code after snippet is expanded from its name/trigger." b
post_expand "${1:Python code that has access to global snip}"
endsnippet

# 'snip.tabstop' - number of tabstop jumped onto;
# 'snip.jump_direction' - '1' if jumped forward and '-1' otherwise;
# 'snip.tabstops' - list with tabstop objects, see above;
# 'snip.snippet_start' - (line, column) of start of the expanded snippet;
# 'snip.snippet_end' - (line, column) of end of the expanded snippet;
# 'snip.expand_anon()' - alias for 'UltiSnips_Manager.expand_anon()';
snippet post_jump "Post Jump. Following snippet will run Python code after each jump." b
post_jump "${1:Python code that has access to global snip}"
endsnippet
# Notable use cases:
# * expand another snippet after jump
# * anonymous snippet after last jump

###################
### Placholders ###
###################

snippet placeholder "An UltiSnips placeholder." i
${${1:number}:${2:${VISUAL:description}}}$0
endsnippet

snippet placeholder_visual "An UltiSnips visual placeholder." i
${${1:number}:`!p snip.rv = "${VISUAL:"`${2:Description}}}$0
endsnippet

# Dynamic Snippets
snippet "snippet_dynamic" "Dynamic snippet" br
snippet "h([1-6])" "Dynamic snippet" br
`!p snip.rv = """# Header
# r - Regex
# b - Beginning of Line
\`!p snip.rv = int(match.group(1)) * '#'\` ${0:${VISUAL:Title}}"""`
`!p snip.rv = "endsnippet"`
endsnippet

# Source (Amazing): https://vi.stackexchange.com/questions/11240/ultisnips-optional-line
# Options (`:help UltiSnips-transformations`)
# -------
# g - Global Replace
# i - Case Insenitive
# m - Multiline (re.MULTILINE)
# a - ASCII Conversion (Default: UTF-8)
snippet placeholder_replacement "An UltiSnips replacement placeholder."
${${1:tabstop_number}/${2:regex}/${3:replacement}/${4:options}}$0
endsnippet

snippet placeholder_dependent "Placeholder dependent on the content of another tabstop. Default: Tabstop is empty" i
\`!p snip.rv = '${1:True}' if t[${2:tabstop_number}] ${3:!=} '${4:}' else '${5:False}'\`$0
endsnippet

###############
### Headers ###
###############

# Descriptor would be like `Documentation`
snippet header "Header for snippet file"
# ${1:`!p snip.rv = snip.basename.capitalize()`} ${2:Descriptor} Snippets
# Author:       `!p snip.rv = author.name`
# Version:      ${3:0.0.1}
# Last Change:  `!p snip.rv = today`
endsnippet

################
### Snippets ###
################

snippet snippet "Basic snippet" b
snippet ${1:Trigger} "${2:Description}" ${3:Options}
${0:${VISUAL:Snippet}}
`!p snip.rv = "endsnippet"`
endsnippet
post_jump "expand(snip)"
snippet snippet_basic "Description"
snippet$1
endsnippet

snippet snippet_visual "Visual snippet" b
snippet ${1:Trigger} "${2:Description}" ${3:Options}
\${0:\${VISUAL:${0:${VISUAL:Snippet}}}}
`!p snip.rv = "endsnippet"`
endsnippet

snippet snippet_alias "Alias snippet" b
post_jump "expand(snip)"
snippet ${1:Alias} "Description"
${2:Actual Snippet}\$1
# REQUIRES THE GLOBAL FROM "expand" SNIPPET!
`!p snip.rv = "endsnippet"`
endsnippet
post_jump "expand(snip)"
snippet alias "Description"
snippet_alias$1
endsnippet

# This will use the first expansion for the others.
# Kept for Reference
snippet snippet_multi "Use one placeholder for many" b
${1:Placeholder}
${0:$1}
$1
${0:$1}
${0:$1}
endsnippet

###############
### Modular ###
###############
# Allow for limited, modular components.

snippet snippet_context "Snippet with a context requirement (expression evals to True/False)." b
context "${1:boolean_python_expression}"
`!p snip.rv = "snippet"` ${2:snippet_name} "${3:snippet_description}"
${4:snippet}
`!p snip.rv = "endsnippet"`$0
endsnippet

global !p
from modular import get_all_snippet_info
from modular import get_snippet_contents
endglobal

#`!p snip.rv = get_snippet_contents('placeholder')`
# This won't expand the snippet anonomously, but you can try post_jump with snip.expand_anon()
# or `:help UltiSnips#Anon` for a Vim function.
snippet placeholder_modular "Get contents of another snippet." i
\`!p snip.rv = get_snippet_contents('${1:snippet_name}')\`$0
endsnippet
